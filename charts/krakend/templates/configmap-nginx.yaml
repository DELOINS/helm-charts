apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "krakend.fullname" . }}-nginx-config
data:
  nginx.conf: |-

    
    worker_processes auto;
    pid /var/run/nginx/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {

        # Disable Nginx version number
        server_tokens   off;

        # Rate limits configuration
        limit_req_zone $binary_remote_addr zone=auth:10m rate={{ .Values.nginx.rateLimits.zoneRate.auth }};
        limit_req_zone $binary_remote_addr zone=ws:10m rate={{ .Values.nginx.rateLimits.zoneRate.ws }};
        limit_req_zone $binary_remote_addr zone=api:30m rate={{ .Values.nginx.rateLimits.zoneRate.api }};
        limit_req_status {{ .Values.nginx.rateLimits.statusCode }};

        {{- if .Values.nginx.rateLimits.dryRun }}
        limit_req_dry_run on;
        {{- end }}

        # Upstreams
        upstream oauth2_proxy {
            server oauth2-proxy:80;
        }
    
        upstream websocket {
            server 127.0.0.1:8001;
        }
    
        upstream api_gateway {
            server 127.0.0.1:8000;
        }

        # Header mapping
        map $http_upgrade $connection_upgrade {
            default upgrade;
            '' close;
        }

        map $upstream_http_x_auth_request_roles $x_auth_user_roles {
            default "";
            ~^(.*)$ $1;
        }
    
        map $upstream_http_x_auth_request_groups $x_auth_user_groups {
            default "";
            ~^(.*)$ $1;
        }

        map $upstream_http_x_auth_request_user $x_auth_user {
            default "";
            ~^(.*)$ $1;
        }

        server {
            listen {{ .Values.service.port }};
            server_name krakend;

{{ .Values.nginx.server | indent 12 }}

            {{- if not .Values.debug.enabled -}}
            # ALLOW REDIRECTION FROM KRAKEND TO OAUTH2-PROXY
            # PROTECTED WITH RATE LIMITS
            location /oauth2/ {

                limit_req zone=auth burst=20 nodelay;
                proxy_pass       http://oauth2_proxy;

                proxy_set_header Host                    $host;
                proxy_set_header X-Real-IP               $remote_addr;
                proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
            }

            # INTERNAL ENDPOINT USED FOR REQUEST AUTH VALIDATION
            location = /oauth2/auth {

                internal;
                
                proxy_pass       http://oauth2_proxy;

                proxy_set_header Host             $host;
                proxy_set_header X-Real-IP        $remote_addr;
                proxy_set_header X-Forwarded-Uri  $request_uri;

                # nginx auth_request includes headers but not body
                proxy_set_header Content-Length   "";
                proxy_pass_request_body           off;

            }
            {{- end }}

            location /websocket {

                # RATE LIMIT SETTINGS
                limit_req zone=ws burst=10 nodelay;

                # SET TENANT ID HEADER
                proxy_set_header       X-Tenant-ID {{ .Values.env.OAUTH2_KRAKEND_PLUGIN_TENANT_ID }};

                # DELETE RBAC HEADERS FROM CLIENT REQUEST 
                proxy_set_header       From "";
                proxy_set_header       X-Auth-User-Roles "";
                proxy_set_header       X-Auth-User-Groups "";

                {{ if .Values.debug.enabled }}
                # SIMULTE OAUTH2-PROXY RBAC HEADERS
                proxy_set_header       X-Auth-User-Roles    {{ .Values.debug.x_forwarded_roles }};
                proxy_set_header       X-Auth-User-Groups   {{ .Values.debug.x_forwarded_groups }};
                proxy_set_header       From                 {{ .Values.debug.x_forwarded_user }};
                {{- else }}
                # OAUTH2-PROXY REQUESTS AUTH
                auth_request /oauth2/auth;
                error_page 401 =403 /oauth2/sign_in;

                # PASS INFORMATION VIA X-User and X-Email HEADERS
                # REQUIRES RUNNING OAUTH2-PROXY WITH --set-xauthrequest FLAG
                auth_request_set $user          $x_auth_user;
                auth_request_set $email         $x_auth_user;
                auth_request_set $auth_group    $x_auth_user_groups;
                auth_request_set $auth_roles    $x_auth_user_roles;

                # MAP RBAC HEADERS FROM OAUTH2-PROXY TO FRINX
                proxy_set_header From               $user;
                proxy_set_header X-Auth-User-Groups $auth_group;
                proxy_set_header X-Auth-User-Roles  $auth_roles;
                {{- end }}

                # WEBSOCKET REQUEST 
                internal;

                rewrite ^/websocket(.*)$ $1 break;
                proxy_pass http://websocket;

                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
            }

            location / {

                # RATE LIMIT SETTINGS
                limit_req zone=api burst=10 nodelay;

                # SET TENANT ID HEADER
                proxy_set_header       X-Tenant-ID {{ .Values.env.OAUTH2_KRAKEND_PLUGIN_TENANT_ID }};

                # DELETE RBAC HEADERS FROM CLIENT REQUEST 
                proxy_set_header       From "";
                proxy_set_header       X-Auth-User-Roles "";
                proxy_set_header       X-Auth-User-Groups "";

                {{ if .Values.debug.enabled }}
                # SIMULTE OAUTH2-PROXY RBAC HEADERS
                proxy_set_header       X-Auth-User-Roles    {{ .Values.debug.x_forwarded_roles }};
                proxy_set_header       X-Auth-User-Groups   {{ .Values.debug.x_forwarded_groups }};
                proxy_set_header       From                 {{ .Values.debug.x_forwarded_user }};
                {{- else }}
                # OAUTH2-PROXY REQUESTS AUTH
                auth_request /oauth2/auth;
                error_page 401 =403 /oauth2/sign_in;

                # PASS INFORMATION VIA X-User and X-Email HEADERS
                # REQUIRES RUNNING OAUTH2-PROXY WITH --set-xauthrequest FLAG
                auth_request_set $user          $x_auth_user;
                auth_request_set $email         $x_auth_user;
                auth_request_set $auth_group    $x_auth_user_groups;
                auth_request_set $auth_roles    $x_auth_user_roles;

                # MAP RBAC HEADERS FROM OAUTH2-PROXY TO FRINX
                proxy_set_header From               $user;
                proxy_set_header X-Auth-User-Groups $auth_group;
                proxy_set_header X-Auth-User-Roles  $auth_roles;
                {{- end }}

                # REVERSE PROXY CONFIG FOR REST AND WEBSOCKET REQUESTS
                set $websocket 1;

                if ($http_connection !~* "upgrade") {
                    set $websocket 0;
                }
                
                if ($http_upgrade !~* "websocket") {
                    set $websocket 0;
                }

                if ($websocket) {
                    rewrite ^ /websocket$uri last;
                }

                if ($websocket = 0) {
                    proxy_pass http://api_gateway;
                }
            }
        }

        server {
            listen {{ .Values.service.internalPort }};
            server_name krakend-dev;

{{ .Values.nginx.server | indent 12 }}

            location /websocket {

                # WEBSOCKET REQUEST 
                internal;

                rewrite ^/websocket(.*)$ $1 break;
                proxy_pass http://websocket;

                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Host $host;
            }

            location / {

                # REVERSE PROXY CONFIG FOR REST AND WEBSOCKET REQUESTS
                set $websocket 1;

                if ($http_connection !~* "upgrade") {
                    set $websocket 0;
                }
                
                if ($http_upgrade !~* "websocket") {
                    set $websocket 0;
                }

                if ($websocket) {
                    rewrite ^ /websocket$uri last;
                }

                if ($websocket = 0) {
                    proxy_pass http://api_gateway;
                }
            }
        }
    }